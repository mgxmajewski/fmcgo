/*default - to be ovverriden with props*/
.default-drawer-dimension {
    --cube-width: 6vw;
    --cube-height: 4.2vw;
    --cube-depth: 4vw;
}

.drawer-container {
    width: calc(var(--cube-width) * 1);
    height: calc(var(--cube-height) * 1);
    display: -webkit-box;
    display: flex;
    justify-content: center;
    align-items: center;
    perspective: 2000px;
    perspective-origin: -450px -450px;
}

.cube {

    position: relative;
    width: var(--cube-width);

    height: var(--cube-height);
    transform-style: preserve-3d;
}

.side {
    position: absolute;
    display: grid;
    align-items: center;
    justify-items: center;
    font-size: 1.7vw;
    color: white;
    width: 100%;
    height: 100%;
    border: .3vw solid black;
    outline: 1px solid transparent;
    border-collapse: collapse;
}

.front {
    background-color: black;
    transform: translateZ(calc(var(--cube-depth)));
}

.front-z-animation{
    animation: moveFront 2s infinite ease-in-out alternate;
}

.back {
    transform: rotateY(180deg) translateZ(0);
}

.right {
    width: var(--cube-depth);
    border-left: 0;
    border-right: 0;
    transform: rotateY(90deg) translateZ(calc(var(--cube-width))) translateX(calc(var(--cube-depth) * -1));
    transform-origin: left;

}

.right-z-animation {
    animation: moveRightSide 2s infinite ease-in-out alternate;
}

.left {
    width: var(--cube-depth);
    border-left: 0;
    border-right: 0;
    transform: rotateY(90deg) translateX(calc(var(--cube-depth) * -1));
    transform-origin: left;
}

.left-z-animation {
    animation: moveLeftSide 2s infinite ease-in-out alternate;
}

@keyframes moveFront {
    from {
        transform: translateZ(calc(var(--cube-depth)));
    }
    to {
        transform: translateZ(0);
    }
}

@keyframes moveLeftSide {
    from {
        transform: rotateY(-90deg) translateX(0);
        width: calc(var(--cube-depth));
    }
    to {
        transform: rotateY(-90deg) translateX(0);
        width: 0;
    }
}

@keyframes moveRightSide {
    from {
        width: var(--cube-depth);
        transform: rotateY(-90deg) translateZ(calc(var(--cube-width) * -1)) translateX(0);
    }
    to {
        width: 0;
        transform: rotateY(-90deg) translateZ(calc(var(--cube-width) * -1)) translateX(0);
    }
}
